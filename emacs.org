#+begin_src emacs-lisp :tangle lisp/common.el
  ;; supress debugger by default
  ;; (setq debug-on-error t)
  (setq user-full-name "Richard Hunter"
        user-mail-address "")
#+end_src

* Startup Config
** Basic Internals

- Turn off mouse interface early in startup to avoid momentary display
- hide certain elements if in GUI emacs including scroll bar, tool bar
- set default window sizes for GUI emacs
#+begin_src emacs-lisp :tangle lisp/common.el
  (if (fboundp 'menu-bar-mode) (menu-bar-mode -1))
  (if (fboundp 'tool-bar-mode) (tool-bar-mode -1))
  (if (fboundp 'scroll-bar-mode) (scroll-bar-mode -1))
  ;; (if (fboundp 'fringe-mode) (set-fringe-mode 0))
  (if (display-graphic-p)
      (progn
        (setq initial-frame-alist
              '(
                (tool-bar-lines . 0)
                (width . 200) ; chars
                (height . 80) ; lines
                (left . 300)
                (top . 20)))
        (setq default-frame-alist
              '(
                (tool-bar-lines . 0)
                (width . 200)
                (height . 80)
                (left . 300)
                (top . 20))))
    (progn
      (setq initial-frame-alist '( (tool-bar-lines . 0)))
      (setq default-frame-alist '( (tool-bar-lines . 0)))))
#+end_src

Require some internal libs
#+begin_src emacs-lisp :tangle lisp/common.el
     (require 'linum)
     (require 'paren)
#+end_src

Activate some internal features
- auto-compression:: automatically handle decompressing/compressing of zipped files
- column-number-mode:: display column number in the mode line
- global-auto-revert-mode:: automatically update buffers when they are changed on disk
- global-font-lock-mode:: syntax highlighting
- global-hl-line-mode:: enables highlighting
- display-line-number-mode:: display line numbers by default. See section on Line Numbers for a list of modes where this is disabled
- show-paren-mode:: highlight matching parens/brackets etc
- transient-mark-mode:: highlighting regions
- which-function-mode:: display current function name in the mode line
  
#+begin_src emacs-lisp :tangle lisp/common.el
  (auto-compression-mode 1)
  (column-number-mode 1)
  (global-auto-revert-mode 1)
  (global-font-lock-mode 1)
  (global-hl-line-mode 1)
  ;; (global-display-line-numbers-mode 1)
  (show-paren-mode 1)
  (transient-mark-mode 1)
  (which-function-mode 1)
#+end_src

No need to backup. Let's be brave.

#+begin_src emacs-lisp :tangle lisp/common.el
  (setq backup-inhibited t
        make-backup-files nil
        auto-save-default nil
        create-lockfiles nil)
#+end_src


Location and settings for temp files
- Don't delink hardlinks
- Use version numbers on backups
- Automatically delete excess backuos
- Keep only 20 versions
- Keep only 5 old versions

#+begin_src emacs-lisp :tangle lisp/common.el
  (setq backup-directory-alist '(("." . "~/.emacs.d/backup"))
      backup-by-copying t
      version-control t
      delete-old-versions t
      kept-new-versions 20
      kept-old-versions 5
)
#+end_src

Startup message and scratch buffer setup

#+begin_src emacs-lisp :tangle lisp/common.el
(setq initial-scratch-message (format ";; Scratch buffer - started on %s\n\n" (current-time-string))
      inhibit-startup-message t
      inhibit-splash-screen t)
#+end_src

Uniquify the buffer's name

#+begin_src emacs-lisp :tangle lisp/common.el
(setq uniquify-buffer-name-style 'forward uniquify-separator "/")
#+end_src

Reset some standard keybindings
#+begin_src emacs-lisp :tangle lisp/common.el
  ;; In GUI emacs, C-z minimizes window, which is useless.
  ;; (global-unset-key (kbd "C-z"))
  ;; UNDOING THIS FOR NOW, SINCE IT SWALLOWS c-Z in apple terminal
#+end_src

Auto refresh buffers
#+begin_src emacs-lisp :tangle lisp/common.el
  (global-auto-revert-mode 1)
#+end_src

#+begin_src emacs-lisp :tangle lisp/common.el
  ;; Disable the *Messages* Buffer
  ;; (setq-default message-log-max nil)
  ;; (kill-buffer "*Messages*")

  ;; Disable the *Completions* buffer
  (add-hook 'minibuffer-exit-hook
            (lambda ()
               (let ((buffer "*Completions*"))
                 (and (get-buffer buffer)
                      (kill-buffer buffer)))))
#+end_src

Kill all processes automatically on exit w/out prompting
#+begin_src emacs-lisp :tnagle lisp/common.el
(setq confirm-kill-processes nil)
#+end_src

** GUI Emacs add env path for gui
Set PATH for GUI emacs
#+begin_src emacs-lisp :tangle lisp/common.el
  (setq exec-path (append exec-path '("/usr/local/bin")))
  (setenv "PATH" (concat (getenv "PATH") ":/usr/local/bin"))

#+end_src

** UX Customizations
#+begin_src emacs-lisp :tangle lisp/common.el
    ;; don't auto split vertically
  (setq split-height-threshold nil)

  ;; (require 'move-text)
  (fset 'yes-or-no-p 'y-or-n-p)

  ;; replace line wrap char with whitespace
  (set-display-table-slot standard-display-table 'wrap ?\ )

  ;; Disable tab characters in indentation
  (setq-default indent-tabs-mode nil)

  ;; Remove extra check for killing processes
  (setq confirm-kill-processes nil)

  ;; Don't ring the bell
  (setq ring-bell-function 'ignore)

  ;; default font
  (set-frame-font "Menlo 14" nil t)

  ;; scale text in smallerl steps
  ;; (setq text-scale-mode-step 1.1)

  ;; set face size of minibuffer
  (add-hook 'minibuffer-setup-hook 'my-minibuffer-setup)
  (defun my-minibuffer-setup ()
         (set (make-local-variable 'face-remapping-alist)
            '((default :height 1.3))))
#+end_src
* Package System Setup
** Setup the package manager

#+begin_src emacs-lisp :tangle lisp/packages.el
(require 'package)

(setq package-user-dir (expand-file-name "~/.emacs.d/lisp/vendor"))

(setq package-archives
      '(("melpa"        . "http://melpa.org/packages/")
        ("gnu"          . "http://elpa.gnu.org/packages/")
        ("org"          . "http://orgmode.org/elpa/")))

(package-initialize)

(when (not package-archive-contents)
  (package-refresh-contents))
#+end_src

*** Install and configure =use-package=

#+begin_src emacs-lisp :tangle lisp/packages.el
(unless (package-installed-p 'use-package)
  (package-refresh-contents)
  (package-install 'use-package))

;; Configure `use-package' prior to loading it.
(eval-and-compile
  (setq use-package-always-ensure nil)
  (setq use-package-always-defer nil)
  (setq use-package-always-demand nil)
  (setq use-package-expand-minimally nil)
  (setq use-package-enable-imenu-support t)
  (setq use-package-compute-statistics nil)
  ;; The following is VERY IMPORTANT.  Write hooks using their real name
  ;; instead of a shorter version: after-init ==> `after-init-hook'.
  ;;
  ;; This is to empower help commands with their contextual awareness,
  ;; such as `describe-symbol'.
  (setq use-package-hook-name-suffix nil))
#+end_src

* Appearance & UI
** Mouse & Scroll Preferences
Enable smooth scroll and scroll window under mouse

#+begin_src emacs-lisp :tangle lisp/common.el
(setq hscroll-step 1)
(setq scroll-conservatively 1000)
(setq mouse-wheel-follow-mouse 't)
(setq use-dialog-box t)               ; only for mouse events
(setq use-file-dialog nil)
#+end_src

** Extended Display Preferences 
- Set default size of the window frame on load
- Padding between buffer and line number
#+begin_src emacs-lisp :tangle lisp/common.el
; (setq initial-frame-alist '((top . 20) (left . 300) (width . 180) (height . 70)))
(setq linum-format "%d ")
#+end_src

** OSX Specific Settings
Improve appearance of title bar on osx GUI emacs, white on black
#+begin_src emacs-lisp :tangle lisp/common.el
  (add-to-list 'initial-frame-alist '(ns-transparent-titlebar . t))
  (add-to-list 'initial-frame-alist '(ns-appearance . dark))
  (add-to-list 'default-frame-alist '(ns-transparent-titlebar . t))
  (add-to-list 'default-frame-alist '(ns-appearance . dark))
#+end_src

** Default Theme
Install and configure =modus-themes=

By default, use =modus-vivendi= theme, a dark theme by the talented Prot. Manual and configuration details can be found [[https://protesilaos.com/modus-themes][here]].

#+begin_src emacs-lisp :tangle lisp/packages.el
  (use-package modus-themes
    :ensure t
    :init
    (setq modus-themes-slanted-constructs t
          modus-themes-bold-constructs nil
          modus-themes-subtle-line-numbers t
          modus-themes-fringes 'subtle
          modus-themes-completions 'opinionated
          modus-themes-mode-line '(padding accented 3d)
          ; modus-themes-syntax '(green-strings yellow-comments faint alt-syntax)
          modus-themes-region 'no-extend
          ;; modus-themes-vivendi-color-overrides
          ;;   '((bg-main . "#1d2021")
          ;;    (fg-main . "#c2c2c2"))
          modus-themes-org-agenda
          '((header-block . (variable-pitch scale-title))
            (header-date . (grayscale workaholic bold-today))
            (scheduled . uniform))
          )
    ;; Load the theme files before enabling a theme (else you get an error).
    (modus-themes-load-themes)
    :config
    (modus-themes-load-vivendi)
    :bind ("<f6>" . modus-themes-toggle))

#+end_src

** Modeline
- TODO: customize modeline
- [[https://occasionallycogent.com/custom_emacs_modeline/index.html][Customizing Modeline]]

* Custom Utility Functions
Here we add custom utility functions
#+begin_src emacs-lisp :tangle lisp/common.el
  ;; Remove tabs
  (defun untabify-buffer ()
    (interactive)
    (untabify (point-min) (point-max)))

  ;; Indent a region
  (defun indent-buffer ()
    (interactive)
    (indent-region (point-min) (point-max)))

  (defun cleanup-buffer ()
    "Perform a bunch of operations on the whitespace content of a buffer.
    Including indent-buffer, which should not be called automatically on save."
    (interactive)
    (untabify-buffer)
    (delete-trailing-whitespace)
    (indent-buffer))

  (defun func/open-package-installer ()
    (interactive)
    (package-refresh-contents)
    (package-list-packages))
#+end_src

* Custom Keybindings
** Configuration
- Make ESC quit prompts
- set keys for Apple keyboard, for emacs in OS X unsure it works...
#+begin_src emacs-lisp :tangle lisp/keybindings.el

(global-set-key (kbd "<escape>") 'keyboard-escape-quit)

(setq mac-command-modifier 'super) ; make cmd key do super
(setq ns-function-modifier 'hyper)  ; make Fn key do Hyper
#+end_src

** Function Key Bindings

#+begin_src emacs-lisp :tangle lisp/keybindings.el
  ;; [F1] -- Go to a specific line number in the current buffer (file)
  (global-set-key [f1] 'goto-line)

  ;; [F2] -- Comment out a Marked (highlighted) region of text
  (global-set-key [f2] 'comment-region)

  ;; [F3] -- Comment out a Marked (highlighted) region of text
  (global-set-key [f3] 'uncomment-region)

  ;; [F4] -- Cleanup all trailing whitespace
  (global-set-key [f4] 'whitespace-cleanup)

  ;; [F5] -- Switch to next buffer (file), burying current
  (global-set-key [f5] 'bury-buffer)

  ;; [F8] -- Toggle Treemacs
  (global-set-key [f8] 'treemacs)

  ;; [F12] -- Toggle Breakpoint
  (global-set-key [f12] 'dap-breakpoint-toggle)
#+end_src

** Marking Regions and Navigating
#+begin_src emacs-lisp :tangle lisp/keybindings.el
  ;; [Ctrl+c -> TAB] -- Mark the entire file
  ;; Hint: Useful for auto-formatting the entire file by pressing (Ctrl+c -> TAB -> TAB)
  (global-set-key (kbd "C-c TAB") 'mark-whole-buffer)
  (global-set-key (kbd "<C-s-up>")     'buf-move-up)
  (global-set-key (kbd "<C-s-down>")   'buf-move-down)
  (global-set-key (kbd "<C-s-left>")   'buf-move-left)
  (global-set-key (kbd "<C-s-right>")  'buf-move-right)
  (global-set-key (kbd "M-n") (lambda() (interactive) (scroll-up 1)))
  (global-set-key (kbd "M-p") (lambda() (interactive) (scroll-down 1)))
#+end_src

** Additional Key Bindings

- TODO: it would be nice to reorganize key bindings so they are assigned along with the packages they work on. More research neeeded on on method for this.

#+begin_src emacs-lisp :tangle lisp/keybindings.el
  ;; [Ctrl+c -> l -- Org store link]
  ;; [Ctrl+c -> a -- Org open agenda]
  (define-key global-map "\C-cl" 'org-store-link)
  (define-key global-map "\C-ca" 'org-agenda)
  (global-set-key "\C-cc" 'org-capture)
  (global-set-key "\C-cb" 'org-switchb)
  (setq org-log-done t)

  (global-set-key (kbd "C-c i") 'func/open-package-installer)

  ;; [Ctrl+c -> TAB] -- Mark the entire file
  ;; Hint: Useful for auto-formatting the entire file by pressing (Ctrl+c -> TAB -> TAB)
  (global-set-key (kbd "C-c TAB") 'mark-whole-buffer)

  ;; [Ctrl+x -> Ctrl+b -- Open iBuffer instead of buffers]
  (global-set-key (kbd "C-x C-b")  'ibuffer)

  ;; By default, killing a word backward will put it in the ring, I don't want this
  (defun backward-kill-word-noring (arg)
    (interactive "p")
    (let ((kr kill-ring))
      (backward-kill-word arg)
      (setq kill-ring (reverse kr))))

  (global-set-key (kbd "C-M-<backspace>") 'backward-kill-word-noring)
#+end_src
* Completions
** Orderless
Install and configure =orderless= a completetions framework helper. I use it in tandem with the built-in =icomplete=.
- Note: I've disabled this for now as it can conflict with helm
#+begin_src emacs-lisp :tangle lisp/packages.el
(use-package orderless
  :ensure t
  :init (icomplete-mode) ; optional but recommended!
  :custom (completion-styles '(orderless)))
#+end_src
** Helm
Helm config
#+begin_src emacs-lisp :tangle lisp/packages.el
;  (use-package helm
;    :ensure t
;    :init
;    (setq helm-split-window-in-side-p           t ; open helm buffer inside current window, not occupy whole other window
;          helm-move-to-line-cycle-in-source     t ; move to end or beginning of source when reaching top or bottom of source.
;          helm-ff-search-library-in-sexp        t ; search for library in `require' and `declare-function' sexp.
;          helm-scroll-amount                    8 ; scroll 8 lines other window using M-<next>/M-<prior>
;          helm-ff-file-name-history-use-recentf t
;          helm-echo-input-in-header-line t)
;    (setq helm-autoresize-max-height 0)
;    (setq helm-autoresize-min-height 40)
;    (helm-autoresize-mode 1)
;    :config
;    (define-key global-map [remap find-file] #'helm-find-files)
;    (define-key global-map [remap execute-extended-command] #'helm-M-x)
;    (define-key global-map [remap switch-to-buffer] #'helm-mini))
#+end_src

* Buffer Move
Install =buffer-move= for arranging buffers
#+begin_src emacs-lisp :tangle lisp/packages.el
(unless (package-installed-p 'buffer-move)
  (package-install 'buffer-move))
#+end_src

* Dired
** Configuration
Setup =dired= the way I like it. 
#+begin_src emacs-lisp :tangle lisp/hooks.el
  (require 'dired-x) ;; enable extra features by default
  (setq insert-directory-program "gls" dired-use-ls-dired t)
  (use-package dired
    :config
    (setq dired-dwim-target t)
    (setq dired-listing-switches
          "-GFhlva --group-directories-first --time-style=long-iso")
    ;; Note that the the syntax for `use-package' hooks is controlled by
    ;; the `use-package-hook-name-suffix' variable.  The "-hook" suffix is
    ;; not an error of mine.
    :hook ((dired-mode-hook . dired-hide-details-mode)
           (dired-mode-hook . (lambda() (display-line-numbers-mode -1)))
           (dired-mode-hook . hl-line-mode)))
#+end_src

Also auto refresh dired, but be quiet about it
#+begin_src emacs-lisp :tangle lisp/hooks.el
(setq global-auto-revert-non-file-buffers t)
(setq auto-revert-verbose nil)
#+end_src

* Debugging: ~dap-mode~
#+begin_src emacs-lisp :tangle lisp/hooks.el
  (use-package dap-mode
    :ensure t
    :custom
      (dap-auto-configure-features '(sessions locals controls tooltip))
    :config 
    )
  #+end_src

* Custom Functions
Use "F" to open all marked files. Code lifted from [[https://stackoverflow.com/questions/1110118/in-emacs-dired-how-to-find-visit-multiple-files][here]].
#+begin_src emacs-lisp :tangle lisp/hooks.el
(eval-after-load "dired"
  '(progn
     (define-key dired-mode-map "F" 'my-dired-find-file)
     (defun my-dired-find-file (&optional arg)
       "Open each of the marked files, or the file under the point, or when prefix arg, the next N files "
       (interactive "P")
       (let* ((fn-list (dired-get-marked-files nil arg)))
         (mapc 'find-file fn-list)))))
#+end_src
* LSP & Company
** LSP
#+begin_src emacs-lisp :tangle lisp/hooks.el
   (setq package-selected-packages '(lsp-mode yasnippet lsp-ui lsp-treemacs helm-lsp projectile hydra flycheck company avy which-key helm-xref json-mode))
   (when (cl-find-if-not #'package-installed-p package-selected-packages)
     (package-refresh-contents)
     (mapc #'package-install package-selected-packages))

   (helm-mode)
   (require 'helm-xref)

  (defun helm-buffer-face-mode ()
    "Helm buffer face"
    (interactive)
    (with-helm-buffer
      (setq line-spacing 2)
      (buffer-face-set '(:family "Source Code Pro" :height 150))))

   (add-hook 'helm-update-hook 'helm-buffer-face-mode)

   (define-key global-map [remap find-file] #'helm-find-files)
   (define-key global-map [remap execute-extended-command] #'helm-M-x)
   (define-key global-map [remap switch-to-buffer] #'helm-mini)
   (define-key global-map (kbd "C-.") #'lsp-find-definition)  
   (which-key-mode)
   ;; (add-hook 'prog-mode-hook #'lsp)
   (setq gc-cons-threshold (* 100 1024 1024)
         read-process-output-max (* 1024 1024)
           company-idle-delay 0.0
           company-tooltip-align-annotations t
           company-minimum-prefix-length 1
           create-lockfiles nil) ;; lock files will kill `npm start'

   (with-eval-after-load 'lsp-mode
     (require 'dap-chrome)
     (add-hook 'lsp-mode-hook #'lsp-enable-which-key-integration))
                                           ;(yas-global-mode))

   ;; don't spam my repos with logfiles
   (setenv "TSSERVER_LOG_FILE" "/tmp/tsserver.log")


   (setq lsp-progress-via-spinner nil)
   ;; hide lsp ui code actions
   (setq lsp-ui-sideline-show-code-actions nil)
#+end_src

*** LSP UI
[[https://github.com/emacs-lsp/lsp-ui][github]]

#+begin_src emacs-lisp :tangle lisp/hooks.el
;; TODO
#+end_src

* TRAMP
TRAMP can be used for editing files remotely. =docker-tramp= allows for editing files within docker containers.
#+begin_src emacs-lisp :tangle lisp/hooks.el
  (use-package docker-tramp
    :ensure t)
 
#+end_src
* Additional Hooks
** Prog Mode
Set the =prog-mode= hook. =prog-mode= is a major mode provided by Emacs. Typically, it is not used directly, instead many programming-related major modes are derived from this mode. Any hooks defined here will be applied to all modes that derive from it, inluding =js-mode= and more.

#+begin_src emacs-lisp :tangle lisp/hooks.el
(defun hook-prog-mode ()
  "Hook for Prog mode."
  (local-set-key (kbd "C-c <right>") 'hs-show-block)
  (local-set-key (kbd "C-c <left>")  'hs-hide-block)
  (local-set-key (kbd "C-c <up>")    'hs-hide-all)
  (local-set-key (kbd "C-c <down>")  'hs-show-all)
  (hs-minor-mode t))

(add-hook 'prog-mode-hook #'hook-prog-mode)
#+end_src

** Text Mode
Set the =text-mode= hook. We increase the "padding" between line numbers with the linum-format variable.

#+begin_src emacs-lisp :tangle lisp/hooks.el
(defun hook-text-mode ()
  "Hook  for Text mode."
  ;; (linum-mode 1)
  (make-local-variable 'linum-format)
  (setq linum-format " %d "))

(add-hook 'text-mode-hook #'hook-text-mode)
#+end_src

** Ibuffer
I prefer Ibuffer to buffer window. Pretty colors and such. The keybinding =C-b= is overridden to open Ibuffer instead of vanilla buffer window.
#+begin_src emacs-lisp :tangle lisp/hooks.el
(use-package ibuffer
  :config
  (setq ibuffer-expert t)
  (setq ibuffer-display-summary nil)
  (setq ibuffer-use-other-window nil)
  (setq ibuffer-show-empty-filter-groups nil)
  (setq ibuffer-movement-cycle nil)
  (setq ibuffer-default-sorting-mode 'filename/process)
  (setq ibuffer-use-header-line t)
  (setq ibuffer-default-shrink-to-minimum-size nil)
  (setq ibuffer-formats
        '((mark modified read-only locked " "
                (name 30 30 :left :elide)
                " "
                (size 9 -1 :right)
                " "
                (mode 16 16 :left :elide)
                " " filename-and-process)
          (mark " "
                (name 16 -1)
                " " filename)))
  (setq ibuffer-saved-filter-groups nil)
  (setq ibuffer-old-time 48)
  :hook ((ibuffer-mode-hook . (lambda() (display-line-numbers-mode -1)))
  (ibuffer-mode-hook . auto-revert-mode)))


#+end_src

** Line numbers
Disable line numbers for the following modes -- TODO: I have disabled line numbers by default. So it may be better to 'opt in' for line numbers on specific modes (prog-mode)
#+begin_src emacs-lisp :tangle lisp/hooks.el
  (dolist (mode '(org-mode-hook
                  org-agenda-mode-hook
                  treemacs-mode-hook
                  term-mode-hook
                  eshell-mode-hook
                  shell-mode-hook
                  image-mode-hook
                  helm-mode-hook
                  markdown-mode-hook))
    (add-hook mode (lambda() (display-line-numbers-mode -1))))
#+end_src

** SmartParens
#+begin_src emacs-lisp :tangle lisp/hooks.el
  (use-package smartparens
    :ensure t)
#+end_src

* Languages
** JavaScript
#+begin_src emacs-lisp :tangle lisp/hooks.el
  ;; Make it so all '.js' files auto load 'js-mode'
  (add-to-list 'auto-mode-alist '("\\.js\\'" . js-mode))

  ;; Make it so all '.jsx' files auto load 'js-mode'
  (add-to-list 'auto-mode-alist '("\\.jsx\\'" . js-jsx-mode))

  ;; turn on lsp mode
  (add-hook 'js-mode-hook #'lsp)

  (defun setup-js-mode ()
    "Setup function for JavaScript"
    (interactive)
    ;; (flycheck-mode +1)
    ;; (setq flycheck-check-syntax-automatically '(save mode-enabled))
    ;; (eldoc-mode +1)
    (define-key global-map [remap js-find-symbol] #'lsp-ui-peek-find-definitions)
    (define-key global-map [remap xref-find-references] #'lsp-ui-peek-find-references)
    (require 'dap-node)
    (dap-node-setup)
    (company-mode +1))

  (add-hook 'js-mode-hook #'setup-js-mode)

  ;; Use 2 spaces when tabbing HTML elements
  (setq-default sgml-basic-offset 2)

  ;; Use 2 spaces when tabbing JS elements
  (setq-default js-indent-level 2)

  ;; Indent switch statements normally
  (setq js2-indent-switch-body t)

  (add-hook 'js-mode-hook #'smartparens-mode)

  (setq-default flycheck-disabled-checkers '(lsp))

  ;; use eslint in js mode over lsp
  (add-hook 'js2-mode-local-vars-hook
            (lambda ()
              (when (flycheck-may-enable-checker 'javascript-eslint)
                (flycheck-select-checker 'javascript-eslint))))

  ;; use eslint installed locally
  (defun my/use-eslint-from-node-modules ()
    (let* ((root (locate-dominating-file
                  (or (buffer-file-name) default-directory)
                  "node_modules"))
           (eslint
            (and root
                 (expand-file-name "node_modules/.bin/eslint"
                                   root))))
      (when (and eslint (file-executable-p eslint))
        (setq-local flycheck-javascript-eslint-executable eslint))))

  (add-hook 'flycheck-mode-hook #'my/use-eslint-from-node-modules)


  ;; Local node modules located here

  (unless (package-installed-p 'add-node-modules-path)
    (package-install 'add-node-modules-path))

  (require 'add-node-modules-path)
  (eval-after-load 'js-mode
    (add-hook 'js-mode-hook #'add-node-modules-path))

  (unless (package-installed-p 'prettier-js)
    (package-install 'prettier-js))

  ;; Load prettier in js-mode
  (require 'prettier-js)
  (add-hook 'js-mode-hook 'prettier-js-mode)
  (add-hook 'typescript-mode-hook 'prettier-js-mode)
#+end_src

** TypeScript
#+begin_src emacs-lisp :tangle lisp/hooks.el
    (use-package typescript-mode
      :ensure t
      :hook (typescript-mode-hook . lsp-deferred))

    ;; Make it so all '.ts' files auto load 'typescript-mode'
    (add-to-list 'auto-mode-alist '("\\.ts\\'" . typescript-mode))

    ;; Make it so all '.tsx' files auto load 'typescript-mode'
    (add-to-list 'auto-mode-alist '("\\.tsx\\'" . typescript-mode))

    ;; Use 2 spaces when tabbing JS elements
    (setq-default typescript-indent-level 2)

    ;; Indent switch statements normally
    (setq js2-indent-switch-clauses t)

#+end_src
** Python
#+begin_src emacs-lisp :tangle lisp/hooks.el
  (use-package python ;; mode is python-mode but package is called python
    :hook (python-mode-hook . lsp-deferred)
    :custom
    ;; NOTE: Set these if Python 3 is called "python3" on your system!
    ;; (python-shell-interpreter "python3")
    ;; (dap-python-executable "python3")
    (dap-python-debugger 'debugpy)
    :config
    (require 'dap-python))

  ;; (add-hook 'python-mode-hook . '(add-hook 'after-save-hook 'whitespace-cleanup))

  (use-package pyvenv
    :ensure t
    :commands pyenv-activate
    :config
    (setq pyvenv-mode-line-indicator
        '(pyvenv-virtual-env-name ("[venv:" pyvenv-virtual-env-name "] ")))
    (pyvenv-mode 1))

  (use-package lsp-pyright
    :ensure t
    :init (setq lsp-python-ms-auto-install-server t)
    :hook (python-mode-hook . (lambda ()
                                (require 'lsp-pyright)
                                (lsp)))); or lsp-deferred

  (dap-register-debug-template "Configs"
                               (list :type "python"                                           
                                     :args (concat
                                            "run"
                                            " -m" 
                                            " --wait-for-client")
                                     :cwd "/Users/rhunter/git/cloud/configs"
                                     :environment-variables '(("PYTHONPATH" . "/Users/rhunter/.pyenv/versions/3.8.11/lib/python38.zip:/Users/rhunter/.pyenv/versions/3.8.11/lib/python3.8:/Users/rhunter/.pyenv/versions/3.8.11/lib/python3.8/lib-dynload:/Users/rhunter/.virtualenvs/configs/lib/python3.8/site-packages:/Users/rhunter/git/cloud/configs/src"))
                                          ;:environment-variables '(("PYTHONPATH" . "/Users/rhunter/git/cloud/configs/src"))
                                     :target-module (expand-file-name "git/cloud/configs/src/configs/main.py")
                                     :request "launch"
                                     :host "0.0.0.0"
                                     :hostName "0.0.0.0"
                                     :name "Configs"))


  (dap-register-debug-template "SC-AuthZ"
                               (list :type "python"                                           
                                     :args (concat
                                            "run"
                                            " -m" 
                                            " --wait-for-client")
                                     :cwd "/Users/rhunter/git/cloud/sc-authz"
                                     :environment-variables '(("INTERNAL_TOKEN_KEY" . "secret")
                                            ("PYTHONPATH" . "/Users/rhunter/.pyenv/versions/3.8.11/lib/python38.zip:/Users/rhunter/.pyenv/versions/3.8.11/lib/python3.8:/Users/rhunter/.pyenv/versions/3.8.11/lib/python3.8/lib-dynload:/Users/rhunter/.virtualenvs/authz/lib/python3.8/site-packages:/Users/rhunter/git/cloud/sc-authz/src"))
                                     :target-module (expand-file-name "git/cloud/sc-authz/src/hpe_sc_authz/main.py")
                                     :request "launch"
                                     :host "0.0.0.0"
                                     :hostName "0.0.0.0"
                                     :name "SC-AuthZ"))
#+end_src

** Flycheck
#+begin_src emacs-lisp :tangle lisp/hooks.el
(unless (package-installed-p 'flycheck)
  (package-install 'flycheck))
;; http://www.flycheck.org/manual/latest/index.html
(require 'flycheck)

;; turn on flychecking globally
;; (add-hook 'after-init-hook #'global-flycheck-mode)
#+end_src

** YAML
#+begin_src emacs-lisp :tangle lisp/hooks.el 
  (use-package yaml-mode
    :ensure t
  )
#+end_src

** Docker
#+begin_src emacs-lisp :tangle lisp/hooks.el
  (use-package dockerfile-mode
    :ensure t
  )
#+end_src

** JenkinsFile
#+begin_src emacs-lisp :tangle lisp/hooks.el
  (use-package jenkinsfile-mode
    :ensure t
  )
#+end_src

** Markdown
Define a function =my-markdown-preview= for conveniently previewing markdown files in the GitHub style.

#+begin_src emacs-lisp :tangle lisp/hooks.el
  (setq markdown-preview-stylesheets (list "~/github-markdown.css"))

  (use-package markdown-mode
    :ensure t
    :mode ("\\.md\\'" . gfm-mode)
    :commands (markdown-mode gfm-mode)
    :config
    (setq markdown-command "pandoc -t html5"))
    ;;(setq markdown-command "markdown"))

  (use-package simple-httpd
    :ensure t
    :config
    (setq httpd-port 7070)
    (setq httpd-host (system-name)))

  (use-package impatient-mode
    :ensure t
    :commands impatient-mode)

  (defun my-markdown-filter (buffer)
    (princ
     (with-temp-buffer
       (let ((tmp (buffer-name)))
         (set-buffer buffer)
         (set-buffer (markdown tmp))
         (format "<!DOCTYPE html><html><title>Markdown preview</title><link rel=\"stylesheet\" href = \"https://cdnjs.cloudflare.com/ajax/libs/github-markdown-css/3.0.1/github-markdown.min.css\"/>
  <body><article class=\"markdown-body\" style=\"box-sizing: border-box;min-width: 200px;max-width: 980px;margin: 0 auto;padding: 45px;\">%s</article></body></html>" (buffer-string))))
     (current-buffer)))

  (defun my-markdown-preview ()
    "Preview markdown."
    (interactive)
    (unless (process-status "httpd")
      (httpd-start))
    (impatient-mode)
    (imp-set-user-filter 'my-markdown-filter)
    (imp-visit-buffer))
#+end_src

* Org Mode
** Org-Capture
#+begin_src emacs-lisp :tangle lisp/hooks.el
  (setq org-directory "~/org")
  (setq org-default-notes-file "~/org/refile.org")                           

  (setq org-refile-targets (quote (("~/org/kraken.org" :maxlevel . 2)
                                   ("~/org/notes.org" :level . 1)
                                   ("~/org/refile.org" :level . 1))))

    ;; I use C-c c to start capture mode
    (global-set-key (kbd "C-c c") 'org-capture)

    ;; Capture templates for: TODO tasks, Notes, appointments, phone calls, meetings, and org-protocol
    (setq org-capture-templates
          (quote (("t" "todo" entry (file "~/org/refile.org")
                   "* TODO %?\n%U\n%a\n" :clock-in t :clock-resume t)
                  ("r" "respond" entry (file "~/org/refile.org")
                   "* NEXT Respond to %:from on %:subject\nSCHEDULED: %t\n%U\n%a\n" :clock-in t :clock-resume t :immediate-finish t)
                  ("n" "note" entry (file "~/org/refile.org")
                   "* %? :NOTE:\n%U\n%a\n" :clock-in t :clock-resume t)
                  ("w" "org-protocol" entry (file "~/org/refile.org")
                   "* TODO Review %c\n%U\n" :immediate-finish t)
                  ("m" "Meeting" entry (file "~/org/refile.org")
                   "* MEETING with %? :MEETING:\n%U" :clock-in t :clock-resume t))))

#+end_src

** Agenda Setup
#+begin_src emacs-lisp :tangle lisp/hooks.el
         (setq org-agenda-files (quote ("~/org/notes.org"
                                        "~/org/kraken.org"
                                        "~/org/refile.org")))
         (setq org-agenda-sticky t)
         (setq org-agenda-inhibit-startup nil)

         ;; Compact the block agenda view (disabled)
         (setq org-agenda-compact-blocks nil)
         (setq org-deadline-warning-days 10)

  (setq org-agenda-custom-commands
        '(("W" "Weekly Review"
           ((agenda "" ((org-agenda-span 7)))
            (todo "GOAL"
                  ((org-agenda-overriding-header "Sprint Goals")))
            (todo "TODO|IN PROGRESS"
                  ((org-agenda-overriding-header "My Todos")))
            (todo "TASK"
                  ((org-agenda-overriding-header "Team Tasks")))
            ))))
#+end_src

** Special
#+begin_src emacs-lisp :tangle lisp/hooks.el
  (defvar org-sec-with "nobody"
    "Value of the :with: property when doing an
     org-sec-tag-entry. Change it with org-sec-set-with,
     set to C-c w")

  (defvar org-sec-where ""
    "Value of the :at: property when doing an
     org-sec-tag-entry. Change it with org-sec-set-with,
     set to C-c W")

  (defvar org-sec-with-history '()
    "History list of :with: properties")

  (defvar org-sec-where-history '()
    "History list of :where: properties")

  (defun org-sec-set-with ()
    "Changes the value of the org-sec-with variable for use
     in the next call of org-sec-tag-entry."
    (interactive)
    (setq org-sec-with (read-string "With: " nil
                                    'org-sec-with-history "")))
  (global-set-key "\C-cw" 'org-sec-set-with)

  (defun org-sec-set-where ()
    "Changes the value of the org-sec-where variable for use
     in the next call of org-sec-tag-entry."
    (interactive)
    (setq org-sec-where
          (read-string "Where: " nil
                       'org-sec-where-history "")))
  (global-set-key "\C-cW" 'org-sec-set-where)
#+end_src

** Todo states
#+begin_src emacs-lisp :tangle lisp/hooks.el 

  (setq org-todo-keywords
        '((sequence "TODO(t)" "IN PROGRESS(p)" "|" "DONE(d)")
          (sequence "TASK(f)"  "|" "DONE(d)")
          (sequence "GOAL(g)" "|" "DELIVERED(y)")))

  (setq org-todo-keyword-faces
        '(("TODO" . (:foreground "DarkOrange1" :weight bold))
          ("IN PROGRESS" . (:foreground "sea green"))
          ("DONE" . (:foreground "light sea green"))
          ("TASK" . (:foreground "magenta"))))
#+end_src

** Visual settings

Set maximum indentation for description lists
#+begin_src emacs-lisp :tangle lisp/hooks.el
  (setq org-list-description-max-indent 5)
#+end_src

Hude emphasis markup (e.g. /.../ for italics, *...* for bold, etc.)
#+begin_src emacs-lisp :tangle lisp/hooks.el
  (setq org-hide-emphasis-markers t)
#+end_src

Visual fill mode, visual fill column mode settings
#+begin_src emacs-lisp :tangle lisp/hooks.el
  ;; set up display of org mode docs
  (defun org-mode-visual-fill ()
    (setq visual-fill-column-width 160
          visual-fill-column-center-text t
          visual-fill-column-mode 1))

  ;; (unless (package-installed-p 'visual-fill-column)
  ;;   (package-install 'visual-fill-column))

  (use-package visual-fill-column
    :ensure t
    :defer t
    :hook (org-mode-hook . org-mode-visual-fill))
#+end_src

Define headline fonts, disabled for now...TODO [[https://zzamboni.org/post/beautifying-org-mode-in-emacs/]]
#+begin_src emacs-lisp :tangle lisp/hooks.el
   ;; (let* ((variable-tuple
   ;;          (cond ((x-list-fonts "Optima Regular")  '(:font "Optima Regular"))
   ;;                ((x-list-fonts "Lucida Grande")   '(:font "Lucida Grande"))
   ;;                ((x-list-fonts "Verdana")         '(:font "Verdana"))
   ;;                ((x-family-fonts "Sans Serif")    '(:family "Sans Serif"))
   ;;                (nil (warn "Cannot find a Sans Serif Font.  Install Source Sans Pro."))))
   ;;         (base-font-color     (face-foreground 'default nil 'default))
   ;;         (headline           `(face-foreground 'default nil 'default)))

   ;;    (custom-theme-set-faces
   ;;     'user
   ;;     `(org-level-8 ((t (,@headline ,@variable-tuple))))
   ;;     `(org-level-7 ((t (,@headline ,@variable-tuple))))
   ;;     `(org-level-6 ((t (,@headline ,@variable-tuple))))
   ;;     `(org-level-5 ((t (,@headline ,@variable-tuple))))
   ;;     `(org-level-4 ((t (,@headline ,@variable-tuple :height 1.03))))
   ;;     `(org-level-3 ((t (,@headline ,@variable-tuple :height 1.05))))
   ;;     `(org-level-2 ((t (,@headline ,@variable-tuple :height 1.07))))
   ;;     `(org-level-1 ((t (,@headline ,@variable-tuple :height 1.1))))
   ;;     `(org-document-title ((t (,@headline ,@variable-tuple :height 1.2 :underline nil))))))

   ;; '(variable-pitch ((t (:family "ETBembo" :height 180 :weight thin))))
   ;;  '(fixed-pitch ((t ( :family "Fira Code Retina" :height 160)))))

   ;; (add-hook 'org-mode-hook 'variable-pitch-mode)
   #+end_src


Define Setup
#+begin_src emacs-lisp :tangle lisp/hooks.el
  (defun org-mode-setup ()
    (org-bullets-mode)
    (org-indent-mode)
    (visual-line-mode 1)
    )
#+end_src


** Bootstrap Org
    #+begin_src emacs-lisp :tangle lisp/hooks.el
    (use-package org
      :hook ((org-mode-hook . org-mode-setup))
      :config
      (setq org-ellipsis " ▼"))
    #+end_src

** Org Bullets
#+begin_src emacs-lisp :tangle lisp/hooks.el
  (use-package org-bullets
    :ensure t
    :after org
    :hook (org-mode . org-bullets-mode)
    :custom
    (org-bullets-bullet-list '("◉" "○" "●" "○" "●" "○" "●")))


  (use-package plantuml-mode
    :ensure t
    )

  (setq plantuml-output-type "png")
  (setq org-plantuml-jar-path "~/plantuml.jar")
  (setq plantuml-jar-path "~/plantuml.jar")
  (setq plantuml-default-exec-mode 'jar)

  ;; Make it so all '.puml' files auto load 'plantuml-mode'
  (add-to-list 'auto-mode-alist '("\\.puml\\'" . plantuml-mode))

  ;; load language support
  (org-babel-do-load-languages
   'org-babel-load-languages
   '((emacs-lisp . t)
     (python . t)
     (shell . t)
     (js . t)
     (plantuml . t) 
     ))
#+end_src

** Org Mode Custom Keybindings
macOS swallows certain keybindings in terminal mode. Redfining the most important ones to me here
#+begin_src emacs-lisp :tangle lisp/keybindings.el
(global-set-key (kbd "C-c y") 'org-insert-structure-template)
#+end_src

* Magit
Pull =magit= and launch it with ~C-x g~
#+begin_src emacs-lisp :tangle lisp/hooks.el
  (use-package magit
    :ensure t
  )

  ;; (unless (package-installed-p 'magit)
  ;;   (package-install 'magit))

  (global-set-key (kbd "C-x g") 'magit-status)
#+end_src

** ediff
#+begin_src emacs-lisp :tangle lisp/common.el
  (custom-set-variables
   '(ediff-split-window-function (quote split-window-horizontally)))
#+end_src
* Custom Interface Interactions

#+begin_src emacs-lisp :tangle lisp/hooks.el
  (defun rh-reload-emacs-init ()
    (interactive)
    (load-file "~/.emacs.d/init.el"))
  ;; (unless (package-installed-p 'goto-last-change)
  ;;   (package-install 'goto-last-change))

  ;; (use-package goto-last-change
  ;;   ;; :straight t
  ;;   :bind ("C-z" . goto-last-change))
#+end_src

* Bootstrap
We create a bootstrap file to load all the lisp files that were generated by the code blocks above
#+begin_src emacs-lisp :tangle emacs.el
  (add-to-list 'load-path "~/.emacs.d/lisp")
  (load-library "common")
  (load-library "packages")
  (load-library "hooks")
  (load-library "keybindings")
#+end_src

* Finally
#+begin_quote
All we can do is try.
#+end_quote
