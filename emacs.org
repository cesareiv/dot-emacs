#+begin_src emacs-lisp :tangle lisp/common.el
  ;; supress debugger by default
  ;; (setq debug-on-error t)
  (setq user-full-name "Richard Hunter"
        user-mail-address "")
#+end_src

* Quick Links
- [[*Org Mode][Org Mode]]
- [[*JavaScript][JavaScript]]


* Early Init
#+begin_src emacs-lisp :tangle lisp/early-init.el
  (setq package-enable-at-startup nil)

  ;; ;; bootstrap straight.el
  ;; (defvar bootstrap-version)
  ;;     (let ((bootstrap-file
  ;;            (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
  ;;           (bootstrap-version 6))
  ;;       (unless (file-exists-p bootstrap-file)
  ;;         (with-current-buffer
  ;;             (url-retrieve-synchronously
  ;;              "https://raw.githubusercontent.com/radian-software/straight.el/develop/install.el"
  ;;              'silent 'inhibit-cookies)
  ;;           (goto-char (point-max))
  ;;           (eval-print-last-sexp)))
  ;;       (load bootstrap-file nil 'nomessage))

  ;; ;; set use-package to use straight.el
  ;; (setq straight-use-package-by-default t)
#+end_src

* Startup Config
** Basic Internals
- Turn off mouse interface early in startup to avoid momentary display
- hide certain elements if in GUI emacs including scroll bar, tool bar
- set default window sizes for GUI emacs
#+begin_src emacs-lisp :tangle lisp/common.el
  (setq package-enable-at-startup nil)
  (setq frame-inhibit-implied-resize t)
  (if (fboundp 'menu-bar-mode) (menu-bar-mode -1))
  (if (fboundp 'tool-bar-mode) (tool-bar-mode -1))
  (if (fboundp 'scroll-bar-mode) (scroll-bar-mode -1))
  ;; (if (fboundp 'fringe-mode) (set-fringe-mode 0))
  (if (display-graphic-p)
      (progn
        (setq initial-frame-alist
              '(
                (tool-bar-lines . 0)
                (width . 200) ; chars
                (height . 80) ; lines
                (left . 30)
                (vertical-scroll-bars . nil)
                (horizontal-scroll-bars . nil)
                (top . 20)))
        (setq default-frame-alist
              '(
                (width . 200)
                (height . 80)
                (left . 60)
                (top . 20)
                (vertical-scroll-bars . nil)
                (horizontal-scroll-bars . nil)
                (tool-bar-lines . 0))))
    (progn
      (setq initial-frame-alist '( (tool-bar-lines . 0)))
      (setq default-frame-alist '( (tool-bar-lines . 0)))))
#+end_src

** GUI Emacs add env path for gui
Set PATH for GUI emacs
#+begin_src emacs-lisp :tangle lisp/common.el
  (setq exec-path (append exec-path '("/usr/local/bin")))
  (setq exec-path (append exec-path '("/opt/homebrew/bin")))
  (setq exec-path (append exec-path '("/opt/homebrew/sbin")))
  (setq exec-path (append exec-path '("/Users/hunterri/.nvm/versions/node/v16.16.0/bin")))
  ;; (setq exec-path (append exec-path '("/Users/hunterri/git/richard-hunter/dscc-authz-client")))

  (setenv "PATH" (concat (getenv "PATH") ":/usr/local/bin"))
  (setenv "PATH" (concat (getenv "PATH") ":/opt/homebrew/bin"))
  (setenv "PATH" (concat (getenv "PATH") ":/opt/homebrew/sbin"))
  (setenv "PATH" (concat (getenv "PATH") ":/Users/hunterri/.nvm/versions/node/v16.16.0/bin"))

#+end_src

Require some internal libs
- =linum= is deprecated... TODO: make sure its not needed and if anything else can be removed
#+begin_src emacs-lisp :tangle lisp/common.el
  ;; (require 'linum)
  (require 'paren)

#+end_src

Activate some internal features
- auto-compression:: automatically handle decompressing/compressing of zipped files
- column-number-mode:: display column number in the mode line
- global-auto-revert-mode:: automatically update buffers when they are changed on disk
- global-font-lock-mode:: syntax highlighting
- global-hl-line-mode:: enables highlighting
- display-line-number-mode:: display line numbers by default. See section on Line Numbers for a list of modes where this is disabled
- show-paren-mode:: highlight matching parens/brackets etc
- transient-mark-mode:: highlighting regions
- which-function-mode:: display current function name in the mode line (TODO: disabled for causing errors)

#+begin_src emacs-lisp :tangle lisp/common.el
    (auto-compression-mode 1)
    (column-number-mode 1)
    (global-auto-revert-mode 1)
    (global-font-lock-mode 1)
    (global-hl-line-mode 1)
    ;; Lately I've come to dislike line numbers unless pair programming, so leave off
    ;; (global-display-line-numbers-mode 1)
    (show-paren-mode 1)
    (transient-mark-mode 1)
    ;; (which-function-mode 1)
#+end_src

No need to backup. Let's be brave.

#+begin_src emacs-lisp :tangle lisp/common.el
  (setq backup-inhibited t
        make-backup-files nil
        auto-save-default nil
        create-lockfiles nil)
#+end_src


Location and settings for temp files
- Don't delink hardlinks
- Use version numbers on backups
- Automatically delete excess backuos
- Keep only 20 versions
- Keep only 5 old versions

#+begin_src emacs-lisp :tangle lisp/common.el
  (setq backup-directory-alist '(("." . "~/.emacs.d/backup"))
      backup-by-copying t
      version-control t
      delete-old-versions t
      kept-new-versions 20
      kept-old-versions 5)
#+end_src

Warn when opening files over 150MB

#+begin_src emacs-lisp :tangle lisp/common.el
  (setq-default large-file-warning-threshold 150000000)
#+end_src

Startup message and scratch buffer setup

#+begin_src emacs-lisp :tangle lisp/common.el
(setq initial-scratch-message (format ";; Scratch buffer - started on %s\n\n" (current-time-string))
      inhibit-startup-message t
      inhibit-splash-screen t)
#+end_src

Uniquify the buffer's name

#+begin_src emacs-lisp :tangle lisp/common.el
(setq uniquify-buffer-name-style 'forward uniquify-separator "/")
#+end_src

Reset some standard keybindings
#+begin_src emacs-lisp :tangle lisp/common.el
    ;; In GUI emacs, C-z minimizes window, which is useless.
    (if (display-graphic-p)
        (global-unset-key (kbd "C-z")))
#+end_src

Auto refresh buffers
#+begin_src emacs-lisp :tangle lisp/common.el
  (global-auto-revert-mode 1)
#+end_src

#+begin_src emacs-lisp :tangle lisp/common.el
  ;; Disable the *Messages* Buffer
  ;; (setq-default message-log-max nil)
  ;; (kill-buffer "*Messages*")

  ;; Disable the *Completions* buffer
  (add-hook 'minibuffer-exit-hook
            (lambda ()
               (let ((buffer "*Completions*"))
                 (and (get-buffer buffer)
                      (kill-buffer buffer)))))
#+end_src

Kill all processes automatically on exit w/out prompting
#+begin_src emacs-lisp :tangle lisp/common.el
  (setq confirm-kill-processes nil)
#+end_src

Open file system read-only files as read-only in Emacs as well
#+begin_src emacs-lisp :tangle lisp/common.el
  (setq view-read-only t)
#+end_src

** UX Customizations
#+begin_src emacs-lisp :tangle lisp/common.el
    ;; don't auto split vertically
  (setq split-height-threshold nil)

  ;; (require 'move-text)
  (fset 'yes-or-no-p 'y-or-n-p)

  ;; replace line wrap char with whitespace
  (set-display-table-slot standard-display-table 'wrap ?\ )

  ;; Disable tab characters in indentation
  (setq-default indent-tabs-mode nil)

  ;; Remove extra check for killing processes
  (setq confirm-kill-processes nil)

  ;; Don't ring the bell
  (setq ring-bell-function 'ignore)

  ;; default font
  (set-frame-font "Menlo 14" nil t)

  ;; scale text in smallerl steps
  ;; (setq text-scale-mode-step 1.1)

  ;; set face size of minibuffer
  (add-hook 'minibuffer-setup-hook 'my-minibuffer-setup)
  (defun my-minibuffer-setup ()
    (set (make-local-variable 'face-remapping-alist)
         '((default :height 1.3))))
#+end_src
* Package System Setup
** Setup the package manager

#+begin_src emacs-lisp :tangle lisp/packages.el
      ;; bootstrap straight.el

    (defvar bootstrap-version)
        (let ((bootstrap-file
               (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
              (bootstrap-version 6))
          (unless (file-exists-p bootstrap-file)
            (with-current-buffer
                (url-retrieve-synchronously
                 "https://raw.githubusercontent.com/radian-software/straight.el/develop/install.el"
                 'silent 'inhibit-cookies)
              (goto-char (point-max))
              (eval-print-last-sexp)))
          (load bootstrap-file nil 'nomessage))

    ;; set use-package to use straight.el
    (straight-use-package 'use-package)

    ;; Configure use-package to use straight.el by default
    (use-package straight
      :custom
      (straight-use-package-by-default t))


    ;; straight.el (require 'package)

    (add-to-list 'load-path "~/.emacs.d/straight/build")

    ;; straigt.el all below
    ;; (setq package-user-dir (expand-file-name "~/.emacs.d/lisp/vendor"))

    ;; (setq package-archives
    ;;       '(("melpa"        . "http://melpa.org/packages/")
    ;;         ("gnu"          . "http://elpa.gnu.org/packages/")
    ;;         ("org"          . "http://orgmode.org/elpa/")))

    ;; (package-initialize)

    ;; (when (not package-archive-contents)
    ;;   (package-refresh-contents))

#+end_src

*** Install and configure =use-package=

#+begin_src emacs-lisp :tangle lisp/packages.el

  ; (straight-use-package 'use-package)
  ;(unless (package-installed-p 'use-package)
  ;  (package-refresh-contents)
  ;  (package-install 'use-package))

  ;; Configure `use-package' prior to loading it.
  (eval-and-compile
    (setq use-package-always-ensure nil)
    (setq use-package-always-defer nil)
    (setq use-package-always-demand nil)
    (setq use-package-expand-minimally nil)
    (setq use-package-enable-imenu-support t)
    (setq use-package-compute-statistics nil)
    ;; The following is VERY IMPORTANT.  Write hooks using their real name
    ;; instead of a shorter version: after-init ==> `after-init-hook'.
    ;;
    ;; This is to empower help commands with their contextual awareness,
    ;; such as `describe-symbol'.
    (setq use-package-hook-name-suffix nil))
#+end_src

* Appearance & UI
** Mouse & Scroll Preferences
Enable smooth scroll and scroll window under mouse

#+begin_src emacs-lisp :tangle lisp/common.el
  (setq hscroll-step 1)
  (setq scroll-conservatively 1000)
  (setq mouse-wheel-follow-mouse 't)
  (setq use-dialog-box t)               ; only for mouse events
  (setq use-file-dialog nil)

  ;; smooth scroll (requires emacs 29)
  ;; still cant tell if it makes me dizzy...
  (setq pixel-scroll-precision-mode t)
#+end_src

** Cursory
Lightweight package for easily creating cursor presets
#+begin_src emacs-lisp :tangle lisp/packages.el
   (use-package cursory)
   (setq cursory-presets
          '((bar
             :cursor-type (bar . 2)
             :cursor-in-non-selected-windows hollow
             :blink-cursor-blinks 10
             :blink-cursor-interval 0.5
             :blink-cursor-delay 0.2)
            (box
             :cursor-type box
             :cursor-in-non-selected-windows hollow
             :blink-cursor-blinks 10
             :blink-cursor-interval 0.5
             :blink-cursor-delay 0.2)
            (underscore
             :cursor-type (hbar . 3)
             :cursor-in-non-selected-windows hollow
             :blink-cursor-blinks 50
             :blink-cursor-interval 0.2
             :blink-cursor-delay 0.2)))
  (setq cursory-latest-state-file (locate-user-emacs-file "cursory-latest-state"))
  ;; Set last preset or fall back to desired style from `cursory-presets'.
  (cursory-set-preset (or (cursory-restore-latest-preset) 'bar))
  ;; The other side of `cursory-restore-latest-preset'.
  (add-hook 'kill-emacs-hook #'cursory-store-latest-preset)
  ;; We have to use the "point" mnemonic, because C-c c is often the
  ;; suggested binding for `org-capture'.
  (define-key global-map (kbd "C-c p") #'cursory-set-preset)
#+end_src

** Extended Display Preferences
- Set default size of the window frame on load
- Padding between buffer and line number
#+begin_src emacs-lisp :tangle lisp/common.el
; (setq initial-frame-alist '((top . 20) (left . 300) (width . 180) (height . 70)))
(setq linum-format "%d ")
#+end_src

** OSX Specific Settings
Improve appearance of title bar on osx GUI emacs, white on black
#+begin_src emacs-lisp :tangle lisp/common.el
  (add-to-list 'initial-frame-alist '(ns-transparent-titlebar . t))
  (add-to-list 'initial-frame-alist '(ns-appearance . dark))
  (add-to-list 'default-frame-alist '(ns-transparent-titlebar . t))
  (add-to-list 'default-frame-alist '(ns-appearance . dark))
#+end_src

** Default Theme
Install and configure themes

Configure =modus-vivendi= theme. This theme is a highly polished and well-maintained theme with high legibility.
Manual and configuration details can be found [[https://protesilaos.com/modus-themes][here]].
(Note, for now not using it as a default theme, but at any point =F6= can be used to toggle the theme on.)

#+begin_src emacs-lisp :tangle lisp/packages.el
  (use-package modus-themes
    :init
    (setq modus-themes-slanted-constructs t
          modus-themes-bold-constructs nil
          modus-themes-subtle-line-numbers t
          modus-themes-fringes 'subtle
          modus-themes-completions (quote ((matches . (background intense))
                  (selection . (accented intense))
                  (popup . (accented))))
          modus-themes-mode-line '(padding accented 3d)
          ;; modus-themes-syntax '(green-strings yellow-comments faint alt-syntax)
          ;; modus-themes-region (quote (bg-only no-extend))
          ;; modus-themes-vivendi-color-overrides
          ;;   '((bg-main . "#1d2021")
          ;;    (fg-main . "#c2c2c2"))
          modus-themes-org-agenda
          '((header-block . (variable-pitch scale-title))
            (header-date . (grayscale workaholic bold-today))
            (scheduled . uniform))
          )
    ;; uncomment below to load modus themes as default
    ;; :config
    ;; (modus-themes-load-vivendi)
    ;; =f6= for toggling between light and dark modes
    :bind ("<f6>" . modus-themes-toggle))
#+end_src

I like =doom-themes= also...
#+begin_src emacs-lisp :tangle lisp/packages.el
  (use-package doom-themes
    ;; currently enjoying doom-xcode theme
    :config (load-theme 'doom-xcode t)
  )
#+end_src

** Tab Bar
Don't show the buttons on tabs
#+begin_src emacs-lisp :tangle lisp/packages.el
  (setq tab-bar-close-button-show nil)
  (setq tab-bar-new-button-show nil)
#+end_src

Customize Tab Bar face
#+begin_src emacs-lisp :tangle lisp/packages.el
  (set-face-attribute 'tab-bar-tab nil :overline "dark cyan" :box nil)
#+end_src


** Modeline
- TODO: customize modeline, see below (however, liking =doom-modline=)
- [[https://occasionallycogent.com/custom_emacs_modeline/index.html][Customizing Modeline]]

  =doom-modeline= is a very sensible default modeline, so sticking with it for a while
#+begin_src emacs-lisp :tangle lisp/packages.el
  (use-package doom-modeline
  :config (doom-modeline-mode))
#+end_src

=doom-modeline= requires =nerd-fonts=
#+begin_src emacs-lisp :tangle lisp/packages.el
  (straight-use-package '(nerd-fonts :type git :host github :repo "twlz0ne/nerd-fonts.el"))
#+end_src

* Custom Utility Functions
Here we add custom utility functions
#+begin_src emacs-lisp :tangle lisp/common.el
  ;; Remove tabs
  (defun untabify-buffer ()
    (interactive)
    (untabify (point-min) (point-max)))

  ;; Indent a region
  (defun indent-buffer ()
    (interactive)
    (indent-region (point-min) (point-max)))

  (defun cleanup-buffer ()
    "Perform a bunch of operations on the whitespace content of a buffer.
    Including indent-buffer, which should not be called automatically on save."
    (interactive)
    (untabify-buffer)
    (delete-trailing-whitespace)
    (indent-buffer))

  (defun func/open-package-installer ()
    (interactive)
    (package-refresh-contents)
    (package-list-packages))
#+end_src

* Custom Keybindings
** Configuration
- Make ESC quit prompts
- set keys for Apple keyboard, for emacs in OS X unsure it works...
#+begin_src emacs-lisp :tangle lisp/keybindings.el

(global-set-key (kbd "<escape>") 'keyboard-escape-quit)

(setq mac-command-modifier 'super) ; make cmd key do super
(setq ns-function-modifier 'hyper)  ; make Fn key do Hyper
#+end_src

** Function Key Bindings

#+begin_src emacs-lisp :tangle lisp/keybindings.el
  ;; [F1] -- Go to a specific line number in the current buffer (file)
  (global-set-key [f1] 'goto-line)

  ;; [F2] -- Comment out a Marked (highlighted) region of text
  (global-set-key [f2] 'comment-region)

  ;; [F3] -- Comment out a Marked (highlighted) region of text
  (global-set-key [f3] 'uncomment-region)

  ;; [F4] -- Cleanup all trailing whitespace
  (global-set-key [f4] 'whitespace-cleanup)

  ;; [F5] -- Switch to next buffer (file), burying current
  (global-set-key [f5] 'bury-buffer)

  ;; [F8] -- Toggle Treemacs
  (global-set-key [f8] 'treemacs)

  ;; [F12] -- Toggle Breakpoint
  (global-set-key [f12] 'dap-breakpoint-toggle)
#+end_src

** Marking Regions and Navigating
#+begin_src emacs-lisp :tangle lisp/keybindings.el
  ;; [Ctrl+c -> TAB] -- Mark the entire file
  ;; Hint: Useful for auto-formatting the entire file by pressing (Ctrl+c -> TAB -> TAB)
  (global-set-key (kbd "C-c TAB") 'mark-whole-buffer)
  (global-set-key (kbd "<C-s-up>")     'buf-move-up)
  (global-set-key (kbd "<C-s-down>")   'buf-move-down)
  (global-set-key (kbd "<C-s-left>")   'buf-move-left)
  (global-set-key (kbd "<C-s-right>")  'buf-move-right)
  (global-set-key (kbd "M-n") (lambda() (interactive) (scroll-up 1)))
  (global-set-key (kbd "M-p") (lambda() (interactive) (scroll-down 1)))
#+end_src

** Additional Key Bindings

- TODO: it would be nice to reorganize key bindings so they are assigned along with the packages they work on. More research neeeded on on method for this.

#+begin_src emacs-lisp :tangle lisp/keybindings.el
  ;; [Ctrl+c -> l -- Org store link]
  ;; [Ctrl+c -> a -- Org open agenda]
  (define-key global-map "\C-cl" 'org-store-link)
  (define-key global-map "\C-ca" 'org-agenda)
    (global-set-key "\C-cc" 'org-capture)
  (global-set-key "\C-cb" 'org-switchb)
  (setq org-log-done t)

  (global-set-key (kbd "C-c i") 'func/open-package-installer)

  ;; [Ctrl+c -> TAB] -- Mark the entire file
  ;; Hint: Useful for auto-formatting the entire file by pressing (Ctrl+c -> TAB -> TAB)
  (global-set-key (kbd "C-c TAB") 'mark-whole-buffer)

  ;; [Ctrl+x -> Ctrl+b -- Open iBuffer instead of buffers]
  (global-set-key (kbd "C-x C-b")  'ibuffer)

  ;; By default, killing a word backward will put it in the ring, I don't want this
  (defun backward-kill-word-noring (arg)
    (interactive "p")
    (let ((kr kill-ring))
      (backward-kill-word arg)
      (setq kill-ring (reverse kr))))

  (global-set-key (kbd "C-M-<backspace>") 'backward-kill-word-noring)

  ;; Special keys
  (customize-set-variable mac-right-option-modifier nil)
  (customize-set-variable mac-command-modifier 'super)
  (customize-set-variable ns-function-modifier 'hyper)

  ;; Keybinds

  (global-set-key (kbd "s-W") 'delete-frame) ; ⌘-W = Close window
  (global-set-key (kbd "s-}") 'tab-bar-switch-to-next-tab) ; ⌘-} = Next tab
  (global-set-key (kbd "s-{") 'tab-bar-switch-to-prev-tab) ; ⌘-{ = Previous tab
  (global-set-key (kbd "s-t") 'tab-bar-new-tab) ;⌘-t = New tab
  (global-set-key (kbd "s-w") 'tab-bar-close-tab) ; ⌘-w = Close tab

  (unless (< emacs-major-version 28)
    (global-set-key (kbd "s-Z") 'undo-redo)) ; ⌘-Z = Redo
#+end_src

* Completions
** Orderless
Install and configure =orderless= a completetions framework helper. I use it in tandem with the built-in =icomplete=.
#+begin_src emacs-lisp :tangle lisp/packages.el
  (use-package orderless
    :init (icomplete-mode) ; optional but recommended!
    :custom (completion-styles '(orderless)))

    ;; (require 'tree-sitter)
    ;; (require 'tree-sitter-langs)
    #+end_src

** Helm
#+begin_src emacs-lisp :tangle lisp/packages.el
;;  (use-package helm
  ;;   :init
  ;;   (setq helm-split-window-in-side-p           t ; open helm buffer inside current window, not occupy whole other window
  ;;         helm-move-to-line-cycle-in-source     t ; move to end or beginning of source when reaching top or bottom of source.
  ;;         helm-ff-search-library-in-sexp        t ; search for library in `require' and `declare-function' sexp.
  ;;         helm-scroll-amount                    8 ; scroll 8 lines other window using M-<next>/M-<prior>
  ;;         helm-ff-file-name-history-use-recentf t
  ;;         helm-echo-input-in-header-line t)
  ;;   (setq helm-autoresize-max-height 0)
  ;;   (setq helm-autoresize-min-height 40)
  ;;   (setq helm-autoresize-mode 1)
  ;;   :config
  ;;   (define-key global-map [remap find-file] #'helm-find-files)
  ;;   (define-key global-map [remap execute-extended-command] #'helm-M-x)
  ;;   (define-key global-map [remap switch-to-buffer] #'helm-mini))
#+end_src

* Buffer Move
Install =buffer-move= for arranging buffers
#+begin_src emacs-lisp :tangle lisp/packages.el
  (use-package buffer-move)
#+end_src

* Magit
Pull =magit= and launch it with ~C-x g~
#+begin_src emacs-lisp :tangle lisp/packages.el
  (use-package magit)

  ;; Don't ask me to save unsaved buffers on every action
  (setq magit-save-repository-buffers nil)
#+end_src

#+begin_src emacs-lisp :tangle lisp/keybindings.el
  (global-set-key (kbd "C-x g") 'magit-status)
#+end_src


** ediff
#+begin_src emacs-lisp :tangle lisp/common.el
  (custom-set-variables
   '(ediff-split-window-function (quote split-window-horizontally)))
#+end_src



* Dired
** Configuration
Setup =dired= the way I like it.
#+begin_src emacs-lisp :tangle lisp/hooks.el
  (require 'dired-x) ;; enable extra features by default
  (setq insert-directory-program "gls" dired-use-ls-dired t)
  (use-package dired
    :straight nil
    :config
    (setq dired-dwim-target t)
    (setq dired-listing-switches
          "-GFhlva --group-directories-first --time-style=long-iso")
    ;; Note that the the syntax for `use-package' hooks is controlled by
    ;; the `use-package-hook-name-suffix' variable.  The "-hook" suffix is
    ;; not an error of mine.
    :hook ((dired-mode-hook . dired-hide-details-mode)
           (dired-mode-hook . (lambda() (display-line-numbers-mode -1)))
           (dired-mode-hook . hl-line-mode)))
#+end_src

Also auto refresh dired, but be quiet about it
#+begin_src emacs-lisp :tangle lisp/hooks.el
(setq global-auto-revert-non-file-buffers t)
(setq auto-revert-verbose nil)
#+end_src

* Debugging: ~dap-mode~
#+begin_src emacs-lisp :tangle lisp/hooks.el
  (use-package dap-mode
    :custom
      (dap-auto-configure-features '(sessions locals expressions controls tooltip))
    :config
    )
  #+end_src

* Custom Functions
Use "F" to open all marked files in =dired=. Code lifted from [[https://stackoverflow.com/questions/1110118/in-emacs-dired-how-to-find-visit-multiple-files][here]].
#+begin_src emacs-lisp :tangle lisp/hooks.el
(eval-after-load "dired"
  '(progn
     (define-key dired-mode-map "F" 'my-dired-find-file)
     (defun my-dired-find-file (&optional arg)
       "Open each of the marked files, or the file under the point, or when prefix arg, the next N files "
       (interactive "P")
       (let* ((fn-list (dired-get-marked-files nil arg)))
         (mapc 'find-file fn-list)))))
#+end_src

* LSP & Company
** LSP
#+begin_src emacs-lisp :tangle lisp/hooks.el
   (use-package lsp-mode
     :init
     ;; set prefix for lsp-command-keymap (few alternatives - "C-l", "C-c l")
     (setq lsp-keymap-prefix "C-c l")
     :hook (;; replace XXX-mode with concrete major-mode(e. g. python-mode)
            (js-mode . lsp)
            ;; if you want which-key integration
            (lsp-mode . lsp-enable-which-key-integration))
     :commands lsp)

   ;; optionally
  (use-package lsp-ui :commands lsp-ui-mode)
  (use-package company)
  (use-package json-mode)

   ;; if you are helm user
   (use-package helm-lsp :commands helm-lsp-workspace-symbol)
   ;; if you are ivy user
   (use-package lsp-ivy :commands lsp-ivy-workspace-symbol)
   (use-package lsp-treemacs :commands lsp-treemacs-errors-list)
   (use-package yasnippet)
   ;; optionally if you want to use debugger
   (use-package dap-mode)
   ;; (use-package dap-LANGUAGE) to load the dap adapter for your language

   ;; optional if you want which-key integration
   (use-package which-key
       :config
       (which-key-mode))

      ;;  (setq package-selected-packages '(lsp-mode yasnippet lsp-ui lsp-treemacs helm-lsp projectile hydra flycheck company avy which-key helm-xref json-mode))
      ;;  (when (cl-find-if-not #'package-installed-p package-selected-packages)
           ;;(package-refresh-contents)
       ;    (mapc #'package-install package-selected-packages))

   (setq 
    helm-buffer-details-flag nil)
   (helm-mode)
   ;; (require 'helm-xref)

       (defun helm-buffer-face-mode ()
         "Helm buffer face"
         (interactive)
         (with-helm-buffer
           (setq line-spacing 2)
           (buffer-face-set '(:family "Source Code Pro" :height 150))))

        (add-hook 'helm-update-hook 'helm-buffer-face-mode)

        (define-key global-map [remap find-file] #'helm-find-files)
        (define-key global-map [remap execute-extended-command] #'helm-M-x)
        (define-key global-map [remap switch-to-buffer] #'helm-mini)
        (define-key global-map (kbd "C-.") #'lsp-find-definition)
        (which-key-mode)
         (add-hook 'prog-mode-hook #'lsp)
        (setq gc-cons-threshold (* 100 1024 1024)
              read-process-output-max (* 1024 1024)
                company-idle-delay 0.0
                company-tooltip-align-annotations t
                company-minimum-prefix-length 1
                create-lockfiles nil) ;; lock files will kill `npm start'

  (with-eval-after-load 'lsp-mode
    (require 'dap-chrome)
    (require 'dap-firefox)
    ;; (yas-minor-mode)
    (add-hook 'lsp-mode-hook #'lsp-enable-which-key-integration))

         ;;don't spam my repos with logfiles
        (setenv "TSSERVER_LOG_FILE" "/tmp/tsserver.log")

        (add-to-list 'load-path (expand-file-name "lib/lsp-mode" user-emacs-directory))
        (add-to-list 'load-path (expand-file-name "lib/lsp-mode/clients" user-emacs-directory))

     ;   (setq lsp-progress-via-spinner nil)
        ;; hide lsp ui code actions
     ;   (setq lsp-ui-sideline-show-code-actions nil)
#+end_src

*** LSP UI
[[https://github.com/emacs-lsp/lsp-ui][github]]

#+begin_src emacs-lisp :tangle lisp/hooks.el
;; TODO
#+end_src

* TRAMP
TRAMP can be used for editing files remotely.
#+begin_src emacs-lisp :tangle lisp/hooks.el
  ;; TODO: this broke install with straight.el, figure out why
  ;; (add-to-list 'tramp-remote-path 'tramp-own-remote-path)
#+end_src

* Additional Hooks
** Prog Mode
Set the =prog-mode= hook. =prog-mode= is a major mode provided by Emacs. Typically, it is not used directly, instead many programming-related major modes are derived from this mode. Any hooks defined here will be applied to all modes that derive from it, inluding =js-mode= and more.

#+begin_src emacs-lisp :tangle lisp/hooks.el
(defun hook-prog-mode ()
  "Hook for Prog mode."
  (local-set-key (kbd "C-c <right>") 'hs-show-block)
  (local-set-key (kbd "C-c <left>")  'hs-hide-block)
  (local-set-key (kbd "C-c <up>")    'hs-hide-all)
  (local-set-key (kbd "C-c <down>")  'hs-show-all)
  (hs-minor-mode t))

(add-hook 'prog-mode-hook #'hook-prog-mode)
#+end_src

** Text Mode
Set the =text-mode= hook. We increase the "padding" between line numbers with the linum-format variable.

#+begin_src emacs-lisp :tangle lisp/hooks.el
(defun hook-text-mode ()
  "Hook  for Text mode."
  ;; (linum-mode 1)
  (make-local-variable 'linum-format)
  (setq linum-format " %d "))

(add-hook 'text-mode-hook #'hook-text-mode)
#+end_src

** Ibuffer
I prefer Ibuffer to buffer window. Pretty colors and such. The keybinding =C-b= is overridden to open Ibuffer instead of vanilla buffer window.
#+begin_src emacs-lisp :tangle lisp/hooks.el
(use-package ibuffer
  :config
  (setq ibuffer-expert t)
  (setq ibuffer-display-summary nil)
  (setq ibuffer-use-other-window nil)
  (setq ibuffer-show-empty-filter-groups nil)
  (setq ibuffer-movement-cycle nil)
  (setq ibuffer-default-sorting-mode 'filename/process)
  (setq ibuffer-use-header-line t)
  (setq ibuffer-default-shrink-to-minimum-size nil)
  (setq ibuffer-formats
        '((mark modified read-only locked " "
                (name 30 30 :left :elide)
                " "
                (size 9 -1 :right)
                " "
                (mode 16 16 :left :elide)
                " " filename-and-process)
          (mark " "
                (name 16 -1)
                " " filename)))
  (setq ibuffer-saved-filter-groups nil)
  (setq ibuffer-old-time 48)
  :hook ((ibuffer-mode-hook . (lambda() (display-line-numbers-mode -1)))
  (ibuffer-mode-hook . auto-revert-mode)))


#+end_src

** Line numbers
Disable line numbers for the following modes regardless of global setting
#+begin_src emacs-lisp :tangle lisp/hooks.el
 (dolist (mode '(org-mode-hook
                 org-agenda-mode-hook
                 treemacs-mode-hook
                 term-mode-hook
                 eshell-mode-hook
                 shell-mode-hook
                 image-mode-hook
                 helm-mode-hook
                 markdown-mode-hook))
   (add-hook mode (lambda() (display-line-numbers-mode -1))))
#+end_src

Opt in line numbers on these modes regardless of global setting
#+begin_src emacs-lisp :tangle lisp/hooks.el
  (dolist (mode '(dockerfile-mode-hook))(add-hook mode (lambda() (display-line-numbers-mode 1))))
#+end_src

** SmartParens
#+begin_src emacs-lisp :tangle lisp/hooks.el
  (use-package smartparens)
#+end_src

* Languages
** Emacs Lisp
#+begin_src emacs-lisp :tangle lisp/hooks.el
#+end_src

** JavaScript
#+begin_src emacs-lisp :tangle lisp/hooks.el
    ;; Make it so all '.js' files auto load 'js-mode'
    (add-to-list 'auto-mode-alist '("\\.js\\'" . js-mode))

    ;; Make it so all '.jsx' files auto load 'js-mode'
    (add-to-list 'auto-mode-alist '("\\.jsx\\'" . js-jsx-mode))

    ;; Make it so all '.mdx' files auto load 'js-mode'
    (add-to-list 'auto-mode-alist '("\\.jsx\\'" . js-jsx-mode))

    ;; turn on lsp mode
    (add-hook 'js-mode-hook #'lsp)

    ;; dont use tree sitter as it slows down org mode syntax highlighting in code blocks :(
    ;; (add-hook 'js-mode-hook #'tree-sitter-hl-mode)


    (defun setup-js-mode ()
      "Setup function for JavaScript"
      (interactive)
      (flycheck-mode +1)
      (setq flycheck-check-syntax-automatically '(save mode-enabled))
      (eldoc-mode +1)
      (define-key global-map [remap js-find-symbol] #'lsp-ui-peek-find-definitions)
      (define-key global-map [remap xref-find-references] #'lsp-ui-peek-find-references)
      (require 'dap-node)
      (dap-node-setup)
      (company-mode +1))

    (add-hook 'js-mode-hook #'setup-js-mode)

    ;; Use 2 spaces when tabbing HTML elements
    (setq-default sgml-basic-offset 2)

    ;; Use 2 spaces when tabbing JS elements
    (setq-default js-indent-level 2)

    ;; Indent switch statements normally
    (setq js2-indent-switch-body t)

    (add-hook 'js-mode-hook #'smartparens-mode)

    ;; (setq-default flycheck-disabled-checkers '(lsp))

    ;; use eslint in js mode over lsp
    (add-hook 'js2-mode-local-vars-hook
              (lambda ()
                (when (flycheck-may-enable-checker 'javascript-eslint)
                  (flycheck-select-checker 'javascript-eslint))))

    ;; use eslint installed locally
    (defun my/use-eslint-from-node-modules ()
      (let* ((root (locate-dominating-file
                    (or (buffer-file-name) default-directory)
                    "node_modules"))
             (eslint
              (and root
                   (expand-file-name "node_modules/.bin/eslint"
                                     root))))
        (when (and eslint (file-executable-p eslint))
          (setq-local flycheck-javascript-eslint-executable eslint))))

    (add-hook 'flycheck-mode-hook #'my/use-eslint-from-node-modules)


    ;; Local node modules located here

    (use-package add-node-modules-path)

    (require 'add-node-modules-path)
    (eval-after-load 'js-mode
      (add-hook 'js-mode-hook #'add-node-modules-path))

    (use-package prettier-js)

    ; Load prettier in js-mode
    (require 'prettier-js)
    (add-hook 'js-mode-hook 'prettier-js-mode)
#+end_src

** TypeScript
#+begin_src emacs-lisp :tangle lisp/hooks.el
  (use-package typescript-mode
    :hook ((typescript-mode-hook . lsp-deferred)
           (typescript-mode-hook . add-node-modules-path)))

  ;; Make it so all '.ts' files auto load 'typescript-mode'
  (add-to-list 'auto-mode-alist '("\\.ts\\'" . typescript-mode))

  ;; Make it so all '.tsx' files auto load 'typescript-mode'
  (add-to-list 'auto-mode-alist '("\\.tsx\\'" . typescript-mode))

  ;; Use 2 spaces when tabbing TS elements
  (setq-default typescript-indent-level 2)

  ;; Indent switch statements normally
  (setq js2-indent-switch-clauses t)

  (add-hook 'typescript-mode-hook 'prettier-js-mode)
  (add-hook 'typescript-mode-hook 'yas-global-mode)

  ;; (add-hook 'typescript-mode-hook
  ;;           (lambda ()
  ;;             (when (flycheck-may-enable-checker 'javascript-eslint)
  ;;               (flycheck-select-checker 'javascript-eslint))))


  (defun
    setup-ts-mode ()
    "Setup function for TypeScript"
    (interactive)
    (flycheck-mode +1)
    (setq flycheck-check-syntax-automatically '(save mode-enabled))
    (eldoc-mode +1)
    (define-key global-map [remap js-find-symbol] #'lsp-ui-peek-find-definitions)
    (define-key global-map [remap xref-find-references] #'lsp-ui-peek-find-references)
    (company-mode +1))

  (add-hook 'typescript-mode-hook #'setup-ts-mode)

#+end_src


*** TSX Mode
#+begin_src emacs-lisp :tangle lisp/hooks.el
;  (use-package graphql-mode)
;  (use-package coverlay)

;  (use-package origami)

;  (use-package tree-sitter)

;  (use-package tree-sitter-langs)


  ;; (add-hook 'typescript-mode-hook 'tree-sitter-hl-mode)

  ;(straight-use-package '(css-in-js-mode :type git :host github :repo "orzechowskid/tree-sitter-css-in-js"))

  ; (require 'css-in-js)

  ; (straight-use-package '(tsx-mode :type git :host github :repo "orzechowskid/tsx-mode.el" :branch "emacs29"))

  ; (require 'tsx-mode)

  ;; Make it so all '.tsx' files auto load 'typescript-mode'
  ;; (add-to-list 'auto-mode-alist '("\\.tsx\\'" . tsx-mode))



#+end_src

** Python
#+begin_src emacs-lisp :tangle lisp/hooks.el
  (use-package python ;; mode is python-mode but package is called python
    :hook (python-mode-hook . lsp-deferred)
    :custom
    ;; NOTE: Set these if Python 3 is called "python3" on your system!
    ;; (python-shell-interpreter "python3")
    ;; (dap-python-executable "python3")
    (dap-python-debugger 'debugpy)
    :config
    (require 'dap-python))

  ;; (add-hook 'python-mode-hook . '(add-hook 'after-save-hook 'whitespace-cleanup))

  (use-package pyvenv
    :commands pyenv-activate
    :config
    (setq pyvenv-mode-line-indicator
          '(pyvenv-virtual-env-name ("[venv:" pyvenv-virtual-env-name "] ")))
    (pyvenv-mode 1))


  (lsp-register-client
     (make-lsp-client :new-connection (lsp-tramp-connection "pyright")
                      :major-modes '(python-mode)
                      :remote? t
                      :server-id 'pyright-remote))


  (use-package lsp-pyright
    :init (setq lsp-python-ms-auto-install-server t)
    :hook (python-mode-hook . (lambda ()
                                 (require 'lsp-pyright)
                                 (lsp)))); or lsp-deferred

#+end_src

** Flycheck
[[https://www.flycheck.org/manual/latest/index.html][Flycheck Manual]]

#+begin_src emacs-lisp :tangle lisp/hooks.el
  (use-package flycheck)

  ;(require 'flycheck)

  ;; turn on flychecking globally
  ;; (add-hook 'after-init-hook #'global-flycheck-mode)
#+end_src

** YAML
#+begin_src emacs-lisp :tangle lisp/hooks.el
  (use-package yaml-mode)
#+end_src

** Docker
#+begin_src emacs-lisp :tangle lisp/hooks.el
  (use-package dockerfile-mode)
#+end_src

** JenkinsFile
#+begin_src emacs-lisp :tangle lisp/hooks.el
  (use-package jenkinsfile-mode)
#+end_src

** Markdown
Define a function =my-markdown-preview= for conveniently previewing markdown files in the GitHub style.

#+begin_src emacs-lisp :tangle lisp/hooks.el
    (setq markdown-preview-stylesheets (list "~/github-markdown.css"))

    (use-package markdown-mode
      :mode ("\\.md\\'" . gfm-mode)
      :commands (markdown-mode gfm-mode)
      :config
      (setq markdown-command "pandoc -t html5"))
      ;;(setq markdown-command "markdown"))

    (use-package simple-httpd
      :config
      (setq httpd-port 7070)
      (setq httpd-host (system-name)))

    (use-package impatient-mode
      :commands impatient-mode)

    (defun my-markdown-filter (buffer)
      (princ
       (with-temp-buffer
         (let ((tmp (buffer-name)))
           (set-buffer buffer)
           (set-buffer (markdown tmp))
           (format "<!DOCTYPE html><html><title>Markdown preview</title><link rel=\"stylesheet\" href = \"https://cdnjs.cloudflare.com/ajax/libs/github-markdown-css/5.1.0/github-markdown.min.css\"/>
    <body><article class=\"markdown-body\" style=\"box-sizing: border-box;min-width: 200px;max-width: 980px;margin: 0 auto;padding: 45px;\">%s</article></body></html>" (buffer-string))))
       (current-buffer)))


  (defun my-imp-visit-buffer ()
  "Visit the buffer in a browser."
  (interactive)
  (browse-url
  (format "http://localhost:%d/imp/live/%s/"
  httpd-port (url-hexify-string (buffer-name)))))


    (defun my-markdown-preview ()
      "Preview markdown."
      (interactive)
      (unless (process-status "httpd")
        (httpd-start))
      (impatient-mode)
      (imp-set-user-filter 'my-markdown-filter)
      ;;(my-imp-visit-buffer))
      (imp-visit-buffer))
#+end_src

* Org Mode
** Default Settings
- Follow links
- Associate all org files with org mode
- Activate =org-indent-mode= nicer indents
- Activate =visual-line-mode= for readability
#+begin_src emacs-lisp :tangle lisp/hooks.el
  (setq org-return-follows-link t)
  (add-to-list 'auto-mode-alist '("\\.org\\'" . org-mode))
  (add-hook 'org-mode-hook 'org-indent-mode)
  (add-hook 'org-mode-hook 'visual-line-mode)
  ;; (setq org-ellipsis " ▼")
#+end_src

** Visual Settings
Set maximum indentation for description lists
#+begin_src emacs-lisp :tangle lisp/hooks.el
  (setq org-list-description-max-indent 5)
#+end_src

Hide emphasis markup (e.g. /.../ for italics, *...* for bold, etc.)
#+begin_src emacs-lisp :tangle lisp/hooks.el
  (setq org-hide-emphasis-markers t)
#+end_src

Visual fill mode, visual fill column mode settings
#+begin_src emacs-lisp :tangle lisp/hooks.el
  ;; set up display of org mode docs
  (defun org-mode-visual-fill ()
    (setq visual-fill-column-width 160
          visual-fill-column-center-text t
          visual-fill-column-mode 1))

  (use-package visual-fill-column
    :defer t
    :hook (org-mode-hook . org-mode-visual-fill))
#+end_src

** Org-Capture
#+begin_src emacs-lisp :tangle lisp/hooks.el
  (setq org-directory "~/org")
  (setq org-default-notes-file "~/org/refile.org")

  (setq org-refile-targets '((org-agenda-files :maxlevel . 1)))

  (setq org-refile-use-outline-path 'file)
  (setq org-outline-path-complete-in-steps nil)
  (setq org-refile-allow-creating-parent-nodes 'confirm)

    ;; I use C-c c to start capture mode
    (global-set-key (kbd "C-c c") 'org-capture)

    ;; Capture templates for: TODO tasks, Notes, appointments, phone calls, meetings, and org-protocol
    (setq org-capture-templates
          (quote (("g" "General To-Do"
                   entry (file+headline "~/org/todos.org" "General Tasks")
                   "* TODO [#B] %?\n:Created: %T\n "
                   :empty-lines 0)
                  ("j" "Work Log Entry"
                   entry (file+datetree "~/org/log.org")
                   "* %?"
                   :empty-lines 0)
                  ("n" "Note"
                   entry (file+headline "~/org/notes.org" "Notes")
                   "** %?"
                   :empty-lines 0)
                  ("q" "Question"
                   entry (file+headline "~/org/questions.org" "General Question")
                   "* QUESTION %?\n:Created: %T\n Answer: "
                   :empty-lines 0)
                  ("c" "Code To-Do"
                   entry (file+headline "~/org/todos.org" "Code Related Tasks")
                   "* TODO [#B] %?\n:Created: %T\n%i\n%a\nProposed Solution: "
                   :empty-lines 0)
                  ("m" "Meeting"
                   entry (file+datetree "~/org/meetings.org")
                   "* %? :meeting:%^g \n:Created: %T\n** Attendees\n*** \n** Notes\n** Action Items"
                   :tree-type week
                   :clock-in t
                   :clock-resume t
                   :empty-lines 0)
                  ("t" "Ticket"
                   entry (file+headline "~/org/tickets.org" "Tickets")
                   "* TODO [#B] %? %^g\nCreated: %T\n** Jira Link: \n** Notes\n** Status\n - [ ] Research\n - [ ] PR\n - [ ] Verifying\n** Subtasks"
                   :empty-lines 0)
                  ("p" "Sprint"
                   entry (file "~/org/sprints.org" )
                   "** Kraken Sprint %?\n:Created: %T\nSCHEDULED: %T\nDEADLINE: %T\n*** GOAL\n*** Notes\n*** Review\n*** Planning\n*** Retrospective "))))
#+end_src

** Tags
#+begin_src emacs-lisp :tangle lisp/hooks.el
  (setq org-tag-alist '(
                        ;; Ticket types
                        (:startgroup . nil)
                        ("@bug" . ?b)
                        ("@story" . ?u)
                        ("@spike" . ?j)
                        (:endgroup . nil)

                        ;; Ticket flags
                        ("@write_ticket" . ?w)

                        ;; Meeting types
                        (:startgroup . nil)
                        ("dsu" . ?d)
                        ("scrum" . ?g)
                        (:endgroup . nil)

                        ;; Code TODOs tags
                        (:startgroup . nil)
                        ("backend" . ?k)
                        ("ui" . ?f)
                        (:endgroup . nil)

                        ;; Special tags
                        ("CRITICAL" . ?y)
                        ("obstacle" . ?o)

                        ;; Meeting tags
                        ("HPE" . ?h)
                        ("LEAP" . ?z)
                        ("mark" . ?0)
                        ("kalki" . ?7)
                        ("cox" . ?9)
                        ("CDS" . ?l)
                        ("meeting" . ?m)

                        ;; Work Log Tags
                        ("accomplishment" . ?a)))
#+end_src

#+begin_src emacs-lisp :tangle lisp/hooks.el
(setq org-tag-faces
      '(
        ("planning"  . (:foreground "mediumPurple1" :weight bold))
        ("LEAP"      . (:foreground "royalblue1"    :weight bold))
        ("ui"        . (:foreground "forest green"  :weight bold))
        ("testing"   . (:foreground "sienna"        :weight bold))
        ("meeting"   . (:foreground "yellow1"       :weight bold))
        ("CRITICAL"  . (:foreground "red1"          :weight bold))
        ))
#+end_src

** Org Agenda
#+begin_src emacs-lisp :tangle lisp/hooks.el
  ;; (setq org-agenda-files (quote ("~/org/notes.org"
  ;;                                "~/org/todos.org"
  ;;                                "~/org/dev-adv.org"
  ;;                                "~/org/log.org"
  ;;                                "~/org/leap.org"
  ;;                                "~/org/sprints.org"
  ;;                                "~/org/tickets.org"
  ;;                                "~/org/meetings.org")))

  (setq org-agenda-files '("~/org"))
  (setq org-agenda-sticky t)
  (setq org-agenda-inhibit-startup nil)
  (setq org-agenda-window-setup "other-tab")

  ;; Compact the block agenda view (disabled)
  (setq org-agenda-compact-blocks nil)
  (setq org-deadline-warning-days 10)

  ;; (setq org-agenda-custom-commands
  ;;       '(("W" "Weekly Review"
  ;;          ((agenda "" ((org-agenda-span 7)))
  ;;           (todo "GOAL"
  ;;                 ((org-agenda-overriding-header "Sprint Goals")))
  ;;           (todo "KAIZEN"
  ;;                 ((org-agenda-overriding-header "Kaizen")))
  ;;           (todo "TODO|IN PROGRESS"
  ;;                 ((org-agenda-overriding-header "My Todos")))
  ;;           (todo "TASK"
  ;;                 ((org-agenda-overriding-header "Team Tasks")))
  ;;           ))))
#+end_src


*** Custom Agenda Commands
#+begin_src emacs-lisp :tangle lisp/hooks.el
    ;; Agenda View "d"
    (defun air-org-skip-subtree-if-priority (priority)
      "Skip an agenda subtree if it has a priority of PRIORITY.

      PRIORITY may be one of the characters ?A, ?B, or ?C."
      (let ((subtree-end (save-excursion (org-end-of-subtree t)))
            (pri-value (* 1000 (- org-lowest-priority priority)))
            (pri-current (org-get-priority (thing-at-point 'line t))))
        (if (= pri-value pri-current)
            subtree-end
          nil)))

    (setq org-agenda-skip-deadline-if-done t)

    ;; Agenda View "d"
  (defun air-org-skip-subtree-if-priority (priority)
    "Skip an agenda subtree if it has a priority of PRIORITY.

    PRIORITY may be one of the characters ?A, ?B, or ?C."
    (let ((subtree-end (save-excursion (org-end-of-subtree t)))
          (pri-value (* 1000 (- org-lowest-priority priority)))
          (pri-current (org-get-priority (thing-at-point 'line t))))
      (if (= pri-value pri-current)
          subtree-end
        nil)))

  (setq org-agenda-skip-deadline-if-done t)

  (setq org-agenda-custom-commands
        '(
          ;; Daily Agenda & TODOs
          ("d" "Daily agenda and all TODOs"

           ;; Display items with priority A
           ((tags "PRIORITY=\"A\""
                  ((org-agenda-skip-function '(org-agenda-skip-entry-if 'todo 'done))
                   (org-agenda-overriding-header "High-priority Todos:")))

            ;; View 7 days in the calendar view
            ;; (agenda "" ((org-agenda-span 5)))

            ;; Display items with priority B (really it is view all items minus A & C)
            (todo "TODO"
                     ((org-agenda-skip-function '(or (air-org-skip-subtree-if-priority ?A)
                                                     (air-org-skip-subtree-if-priority ?C)
                                                     (org-agenda-skip-if nil '(scheduled deadline))))
                      (org-agenda-overriding-header "ALL normal priority tasks:")))

            ;; Display items with pirority C
            (tags "PRIORITY=\"C\""
                  ((org-agenda-skip-function '(org-agenda-skip-entry-if 'todo 'done))
                   (org-agenda-overriding-header "Low-priority Unfinished tasks:")))

            (todo "TASK|GAP"
                  ((org-agenda-skip-function '(org-agenda-skip-entry-if 'todo 'done))
                   (org-agenda-overriding-header "Tasks and Organizational Gaps:")))

            (todo "QUESTION"
                  ((org-agenda-skip-function '(org-agenda-skip-entry-if 'todo 'done))
                   (org-agenda-overriding-header "Questions needing Answers")))


            ) ;; end agenda sections



           ;; Don't compress things (change to suite your tastes)
           ((org-agenda-compact-blocks nil)))
          ))

#+end_src

** Todo states
#+begin_src emacs-lisp :tangle lisp/hooks.el

  (setq org-todo-keywords
        '((sequence "TODO(t)" "IN PROGRESS(i@/!)" "BLOCKED(b@)" "|" "DONE(d!)" "WONT-DO(w@/!)")
          (sequence "TASK(f)"  "GAP(p)" "|" "OBE(w@/!)" "DONE(d)")
          (sequence "KAIZEN(k)"  "|" "DONE(d)")
          (sequence "QUESTION(q)"  "|" "ANSWERED(a)")
          (sequence "GOAL(g)" "|" "DELIVERED(y!)")))

  (setq org-todo-keyword-faces
        '(("TODO" . (:foreground "DarkOrange1" :weight bold))
          ("IN PROGRESS" . (:foreground "sea green"))
          ("PLANNING" . (:foreground "DeepPink" :weight bold))
          ("BLOCKED" . (:foreground "Red" :weight bold))
          ("DONE" . (:foreground "light sea green"))
          ("TASK" . (:foreground "magenta"))
          ("QUESTION" . (:foreground "maroon2"))
          ("GAP" . (:foreground "IndianRed1"))))
#+end_src

** Visual settings

Define headline fonts, disabled for now...TODO [[https://zzamboni.org/post/beautifying-org-mode-in-emacs/]]
#+begin_src emacs-lisp :tangle lisp/hooks.el

  ;; (let* ((variable-tuple
  ;;          (cond ((x-list-fonts "Optima Regular")  '(:font "Optima Regular"))
  ;;                ((x-list-fonts "Lucida Grande")   '(:font "Lucida Grande"))
  ;;                ((x-list-fonts "Verdana")         '(:font "Verdana"))
  ;;                ((x-family-fonts "Sans Serif")    '(:family "Sans Serif"))
  ;;                (nil (warn "Cannot find a Sans Serif Font.  Install Source Sans Pro."))))
  ;;         (base-font-color     (face-foreground 'default nil 'default))
  ;;         (headline           `(face-foreground 'default nil 'default)))

  ;;    (custom-theme-set-faces
  ;;     'user
  ;;     `(org-level-8 ((t (,@headline ,@variable-tuple))))
  ;;     `(org-level-7 ((t (,@headline ,@variable-tuple))))
  ;;     `(org-level-6 ((t (,@headline ,@variable-tuple))))
  ;;     `(org-level-5 ((t (,@headline ,@variable-tuple))))
  ;;     `(org-level-4 ((t (,@headline ,@variable-tuple :height 1.03))))
  ;;     `(org-level-3 ((t (,@headline ,@variable-tuple :height 1.05))))
  ;;     `(org-level-2 ((t (,@headline ,@variable-tuple :height 1.07))))
  ;;     `(org-level-1 ((t (,@headline ,@variable-tuple :height 1.1))))
  ;;     `(org-document-title ((t (,@headline ,@variable-tuple :height 1.2 :underline nil))))))

  ;; '(variable-pitch ((t (:family "ETBembo" :height 180 :weight thin))))
  ;; '(fixed-pitch ((t ( :family "Fira Code Retina" :height 160)))))

  ;; (add-hook 'org-mode-hook 'variable-pitch-mode)
#+end_src

** Org Bullets
#+begin_src emacs-lisp :tangle lisp/hooks.el
  (use-package org-bullets
  ;  :after org
  ;  :hook (org-mode . org-bullets-mode)
    :custom
    (org-bullets-bullet-list '("⁖" "◉" "○" "✸" "✿")))
#+end_src

** Bootstrap Org
#+begin_src emacs-lisp :tangle lisp/hooks.el
  (add-hook 'org-mode-hook 'org-bullets-mode)
#+end_src

** PlantUML
#+begin_src emacs-lisp :tangle lisp/hooks.el
   (use-package plantuml-mode)

   (setq plantuml-output-type "png")
   (setq org-plantuml-jar-path "~/plantuml.jar")
   (setq plantuml-jar-path "~/plantuml.jar")
   (setq plantuml-default-exec-mode 'jar)

   ;; Make it so all '.puml' files auto load 'plantuml-mode'
   (add-to-list 'auto-mode-alist '("\\.puml\\'" . plantuml-mode))
#+end_src

** Org Babel Language Support
#+begin_src emacs-lisp :tangle lisp/hooks.el
   ;; load language support
   (org-babel-do-load-languages
    'org-babel-load-languages
    '((emacs-lisp . t)
      (python . t)
      (shell . t)
      (js . t)
      (plantuml . t)
      ))
#+end_src

** Org Mode Custom Keybindings
macOS swallows certain keybindings in terminal mode. Redfining the most important ones to me here
#+begin_src emacs-lisp :tangle lisp/keybindings.el
(global-set-key (kbd "C-c y") 'org-insert-structure-template)
#+end_src


** Org JIRA
Install
#+begin_src emacs-lisp :tangle lisp/packages.el
  (use-package org-jira)
#+end_src

Set the Org JIRA base URL and authenticate
#+begin_src emacs-lisp :tangle lisp/hooks.el
  ;; Uncomment next two lines to debug connection issues w/ JIRA
  ;; (setq request-log-level 'blather)
  ;; (setq request-message-level 'blather)

  (setq jiralib-url "https://nimblejira.nimblestorage.com")

  ;; pull token from .authinfo
  (setq jiralib-token
        (cons "Authorization"
              (concat "Bearer " (auth-source-pick-first-password
                  :host "nimblejira.nimblestorage.com"))))
#+end_src

Custom JIRA Queries
#+begin_src emacs-lisp :tangle lisp/hooks.el
    (setq org-jira-custom-jqls
      '(
        (:jql " assignee = currentUser() AND (status = \"To Do\" OR status = \"In Progress\") order by updated DESC "
              :limit 100
              :filename "my-open-issues")))
#+end_src

Define how tickets progress
#+begin_src emacs-lisp :tangle lisp/hooks.el
  ;(defconst org-jira-progress-issue-flow
  ;'(("To Do" . "In Progress"
  ;  ("In Progress" . "Done"))))
#+end_src

* Custom Interface Interactions
#+begin_src emacs-lisp :tangle lisp/hooks.el
  (defun rh-reload-emacs-init ()
    (interactive)
    (load-file "~/.emacs.d/init.el"))

  ;; (unless (package-installed-p 'goto-last-change)
  ;;   (package-install 'goto-last-change))

  ;; (use-package goto-last-change
  ;;   ;; :straight t
  ;;   :bind ("C-z" . goto-last-change))
#+end_src


* vTerm
- vTerm
- vterm-toggle: [[https://github.com/jixiuf/vterm-toggle]]
- multi-vterm: https://github.com/suonlight/multi-vterm
#+begin_src emacs-lisp :tangle lisp/packages.el
  (use-package vterm
    :hook (after-init . vterm-mode))

  (use-package vterm-toggle)
  (use-package multi-vterm)
#+end_src

#+begin_src emacs-lisp :tangle lisp/keybindings.el
  (global-set-key (kbd "<f9>") 'vterm-toggle)
  (global-set-key (kbd "C-<f9>") 'vterm-toggle-cd)
  (define-key vterm-mode-map (kbd "<f9>") 'vterm-toggle)
  (define-key vterm-mode-map (kbd "C-RET") #'vterm-toggle-insert-cd)
#+end_src


* Bootstrap
We create a bootstrap file to load all the lisp files that were generated by the code blocks above
#+begin_src emacs-lisp :tangle early-init.el
  (add-to-list 'load-path "~/.emacs.d/lisp")
  (load-library "early-init")
#+end_src

#+begin_src emacs-lisp :tangle emacs.el
  (add-to-list 'load-path "~/.emacs.d/lisp")
  (load-library "early-init")
  (load-library "common")
  (load-library "packages")
  (load-library "hooks")
  (load-library "keybindings")
#+end_src

* Finally
#+begin_quote
All we can do is try.
#+end_quote
